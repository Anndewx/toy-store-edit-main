import { useEffect, useState } from "react";
import { useLocation } from "react-router-dom";
import "./ReceiptPage.css";

// ‚úÖ ‡πÉ‡∏ä‡πâ helper ‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡∏ö Authorization ‡πÉ‡∏´‡πâ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
import { get } from "../lib/api";
// ‚úÖ ‡∏Ñ‡∏≠‡∏°‡πÇ‡∏û‡πÄ‡∏ô‡∏ô‡∏ï‡πå‡πÅ‡∏ñ‡∏ö‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
import OrderTracking from "../components/OrderTracking";

function mask(s = "", left = 4, right = 2) {
  const str = String(s).replace(/\s/g, "");
  if (str.length <= left + right) return "****";
  return str.slice(0, left) + "****".repeat(3) + str.slice(-right);
}

export default function ReceiptPage() {
  const { search } = useLocation();
  const orderId = new URLSearchParams(search).get("order");
  const [data, setData] = useState(null);

  useEffect(() => {
    (async () => {
      // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ order param ‚Üí ‡∏î‡∏∂‡∏á‡∏à‡∏≤‡∏Å API
      if (orderId) {
        try {
          // ‚õîÔ∏è ‡∏´‡πâ‡∏≤‡∏° fetch ‡∏ï‡∏£‡∏á /api/... ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏à‡∏∞‡πÑ‡∏°‡πà‡πÅ‡∏ô‡∏ö Bearer
          // ‚úÖ ‡πÉ‡∏ä‡πâ get() ‡∏à‡∏≤‡∏Å lib/api (‡πÅ‡∏ô‡∏ö Authorization ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥)
          const json = await get(`/orders/${encodeURIComponent(orderId)}`); // { order, items }

          const order = json.order || {};
          const items = (json.items || []).map((i) => ({
            name: i.name,
            quantity: i.quantity,
            price: i.price,
          }));

          // ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏° history (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏ü‡∏¥‡∏•‡∏î‡πå‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏ô response ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏™‡πà‡∏á‡πÄ‡∏Ç‡πâ‡∏≤ OrderTracking)
          const history = {
            placed: order.placed_at || null,
            processing: order.processing_at || null,
            shipping: order.shipping_at || null,
            delivered: order.delivered_at || null,
          };

          setData({
            order_id: order.order_id,
            at: order.created_at,
            method: "unknown", // ‡∏ù‡∏±‡πà‡∏á server ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Å‡πá‡∏ö method ‚Üí ‡πÅ‡∏™‡∏î‡∏á unknown
            payload: {},
            items,
            total: Number(order.total_price || 0),
            demo: false,
            status: order.status || "placed",
            eta_text: order.eta_text || null,
            history, // üëâ ‡∏™‡πà‡∏á‡∏ï‡πà‡∏≠‡πÉ‡∏´‡πâ OrderTracking
          });
          return;
        } catch {
          // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡∏à‡∏∞‡πÑ‡∏õ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏£‡∏≠‡∏á‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á
        }
      }

      // ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏î‡∏∂‡∏á‡∏à‡∏≤‡∏Å API ‚Üí ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏£‡∏≠‡∏á‡∏à‡∏≤‡∏Å localStorage
      const raw = localStorage.getItem("lastOrder");
      if (raw) {
        try {
          const parsed = JSON.parse(raw);
          if (!parsed.status) parsed.status = "placed";
          // ‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö premium tooltip ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏ô local
          parsed.history = parsed.history || {};
          setData(parsed);
          return;
        } catch {}
      }
      setData(null);
    })();
  }, [orderId]);

  if (!data || !data.order_id) {
    return (
      <div className="rcp">
        <div className="rcp__box">
          <h2>‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à</h2>
          <p>‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ó‡∏≥‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á</p>
        </div>
      </div>
    );
  }

  const method = (data.method || "unknown").toUpperCase();
  const pay = data.payload || {};
  const cardMasked = pay.card_number ? mask(pay.card_number) : null;

  return (
    <div className="rcp">
      {/* ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏ñ‡∏ö‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ (‡∏£‡∏ñ‡∏ß‡∏¥‡πà‡∏á) ‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô‡∏Å‡∏•‡πà‡∏≠‡∏á‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à */}
      <div style={{ maxWidth: 960, margin: "0 auto 16px" }}>
        <OrderTracking
          status={data.status || "placed"}
          etaText={data.eta_text || undefined}
          history={data.history || undefined}
        />
      </div>

      <div className="rcp__box">
        <h2>‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô</h2>
        {data.demo && <div className="rcp__tag">DEMO</div>}

        <div className="rcp__row"><span>‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à</span><b>#{data.order_id}</b></div>
        <div className="rcp__row"><span>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà</span><b>{new Date(data.at).toLocaleString()}</b></div>
        <div className="rcp__row"><span>‡∏ß‡∏¥‡∏ò‡∏µ‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô</span><b>{method}</b></div>
        {cardMasked && <div className="rcp__row"><span>‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£</span><b>{cardMasked}</b></div>}

        <div className="rcp__table">
          <div className="rcp__thead"><span>‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£</span><span>‡∏à‡∏≥‡∏ô‡∏ß‡∏ô</span><span>‡∏£‡∏≤‡∏Ñ‡∏≤</span></div>
          {data.items?.map((i, idx) => (
            <div className="rcp__tr" key={idx}>
              <span>{i.name}</span>
              <span>{i.quantity}</span>
              <span>‡∏ø{(Number(i.price) * Number(i.quantity)).toFixed(2)}</span>
            </div>
          ))}
          <div className="rcp__tfoot">
            <span>‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°</span>
            <span />
            <b>‡∏ø{Number(data.total || 0).toFixed(2)}</b>
          </div>
        </div>

        <div className="rcp__actions">
          <a href="/" className="rcp__btn">‡∏Å‡∏•‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å</a>
          <button className="rcp__btn ghost" onClick={() => window.print()}>‡∏û‡∏¥‡∏°‡∏û‡πå</button>
        </div>
      </div>
    </div>
  );
}
