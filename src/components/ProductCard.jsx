import { Link } from "react-router-dom";
import { useCart } from "../context/CartContext";
import "./ProductCard.css";

/** ‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡πà‡∏≤‡∏£‡∏π‡∏õ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô path ‡∏ó‡∏µ‡πà proxy ‡πÑ‡∏î‡πâ ‡πÅ‡∏•‡∏∞‡∏°‡∏µ fallback */
function resolveImageSrc(product) {
  const raw0 = product?.image_url ?? product?.image ?? "";
  const raw = String(raw0).trim();

  // ‡∏£‡∏π‡∏õ‡∏ß‡πà‡∏≤‡∏á -> ‡πÉ‡∏ä‡πâ placeholder (‡∏≠‡∏¢‡πà‡∏≤‡∏•‡∏∑‡∏°‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ‡πÉ‡∏ô backend: public/images/placeholder.jpg)
  if (!raw) return "/images/placeholder.jpg";

  // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô URL ‡πÄ‡∏ï‡πá‡∏° (http/https) ‡∏Å‡πá‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢
  if (/^https?:\/\//i.test(raw)) return raw;

  // ‡∏ñ‡πâ‡∏≤‡πÉ‡∏´‡πâ‡∏°‡∏≤‡πÄ‡∏õ‡πá‡∏ô "/images/xxx.jpg" (‡∏´‡∏£‡∏∑‡∏≠ "images/xxx.jpg") -> ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô path relative ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ proxy ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
  if (raw.startsWith("/images/")) return raw;
  if (raw.startsWith("images/")) return "/" + raw;

  // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏Ñ‡πà‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå "gundam.jpg" -> ‡∏ï‡πà‡∏≠ prefix /images/
  if (/^[^/\\]+\.[a-z0-9]{2,5}$/i.test(raw)) return `/images/${raw}`;

  // ‡∏Å‡∏£‡∏ì‡∏µ‡∏≠‡∏∑‡πà‡∏ô ‡πÜ ‡πÉ‡∏´‡πâ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô relative ‡πÄ‡∏ä‡πà‡∏ô "/<raw>"
  return raw.startsWith("/") ? raw : `/${raw}`;
}

export default function ProductCard({ product, loading }) {
  const { add } = useCart();

  if (loading) {
    return (
      <div className="p-card skeleton">
        <div className="p-thumb skeleton-thumb"></div>
        <div className="p-body">
          <div className="skeleton-title"></div>
          <div className="skeleton-price"></div>
          <div className="skeleton-btn"></div>
        </div>
      </div>
    );
  }
  if (!product) return null;

  const {
    product_id,
    name,
    price,
    original_price,
    stock = 0,
    on_sale,
  } = product;

  const hasDiscount =
    on_sale === 1 || (original_price && Number(original_price) > Number(price));
  const discountPercent =
    hasDiscount && original_price
      ? Math.round(((original_price - price) / original_price) * 100)
      : 0;

  const stockStatus = stock > 10 ? "in-stock" : stock > 0 ? "low-stock" : "out-of-stock";
  const stockText =
    stock > 10 ? `‡∏°‡∏µ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ ${stock} ‡∏ä‡∏¥‡πâ‡∏ô` : stock > 0 ? `‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÄ‡∏û‡∏µ‡∏¢‡∏á ${stock} ‡∏ä‡∏¥‡πâ‡∏ô!` : "‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏´‡∏°‡∏î";

  const imgSrc = resolveImageSrc(product);

  return (
    <div className="p-card">
      <Link to={`/product/${product_id}`} className="p-thumb" title={name}>
        <img
          src={imgSrc}
          alt={name}
          loading="lazy"
          onError={(e) => {
            e.currentTarget.onerror = null;
            e.currentTarget.src = "/images/placeholder.jpg";
          }}
        />
        <div className="p-badges">
          {hasDiscount && <span className="badge badge-sale">-{discountPercent}%</span>}
          {stock <= 5 && stock > 0 && <span className="badge badge-hot">‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏ô‡πâ‡∏≠‡∏¢</span>}
        </div>
      </Link>

      <div className="p-body">
        <h4 className="p-title">
          <Link to={`/product/${product_id}`}>{name}</Link>
        </h4>

        <div className={`p-stock ${stockStatus}`}>
          <span className="stock-icon">üì¶</span>
          <span className="stock-text">{stockText}</span>
        </div>

        <div className="p-price">
          <span className="price">‡∏ø{Number(price).toFixed(2)}</span>
          {hasDiscount && original_price && (
            <span className="ori">‡∏ø{Number(original_price).toFixed(2)}</span>
          )}
        </div>

        <button className="btn-primary" onClick={() => add(product_id, 1)} disabled={stock === 0}>
          {stock === 0 ? "‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏´‡∏°‡∏î" : "‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏•‡∏á‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤"}
        </button>
      </div>
    </div>
  );
}
